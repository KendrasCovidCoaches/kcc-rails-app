{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! MenuSpy v1.3.0 (Jan 31 2018) - http://leocs.me/menuspy/ - Copyright (c) 2018 Leonardo Santos; MIT License */\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.MenuSpy = factory();\n})(this, function () {\n  'use strict';\n\n  var utils = {\n    extend: function extend(a, b) {\n      for (var key in b) {\n        if (b.hasOwnProperty(key)) {\n          a[key] = b[key];\n        }\n      }\n\n      return a;\n    },\n    offset: function offset(el) {\n      var rect = el.getBoundingClientRect();\n      return {\n        top: rect.top + window.pageYOffset,\n        left: rect.left + window.pageXOffset\n      };\n    },\n    scrollTop: function scrollTop() {\n      return window.pageYOffset || document.documentElement.scrollTop;\n    },\n    addClass: function addClass(el, className) {\n      if (el.classList) {\n        el.classList.add(className);\n      } else {\n        var classes = el.className.split(' ');\n        var existingIndex = classes.indexOf(className);\n\n        if (existingIndex === -1) {\n          classes.push(className);\n        }\n\n        el.className = classes.join(' ');\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (el.classList) {\n        el.classList.remove(className);\n      } else {\n        el.className = el.className.replace(new RegExp(\"(^|\\\\b)\" + className.split(' ').join('|') + \"(\\\\b|$)\", 'gi'), ' ');\n      }\n    },\n    debounce: function debounce(fn, delay) {\n      var timeout = null;\n      return function () {\n        var args = arguments;\n        var context = this;\n\n        if (!timeout) {\n          timeout = setTimeout(function () {\n            timeout = 0;\n            return fn.apply(context, args);\n          }, delay);\n        }\n      };\n    }\n  };\n\n  var MenuSpy = function MenuSpy(element, options) {\n    var this$1 = this;\n\n    if (!element) {\n      return;\n    }\n\n    var defaults = {\n      menuItemSelector: 'a[href^=\"#\"]',\n      activeClass: 'active',\n      threshold: 15,\n      enableLocationHash: true,\n      hashTimeout: 600,\n      callback: null\n    };\n    this.element = typeof element === 'string' ? document.querySelector(element) : element;\n    this.options = utils.extend(defaults, options);\n    this.assignValues();\n    this.debouncedAssignValuesFn = utils.debounce(function () {\n      return this$1.assignValues();\n    });\n    window.addEventListener('resize', this.debouncedAssignValuesFn);\n    this.debouncedHashFn = utils.debounce(function () {\n      var hash = this$1.lastInViewElm ? \"#\" + this$1.lastInViewElm.id : '#';\n\n      if (history.replaceState) {\n        history.replaceState(null, null, hash);\n      } else {\n        var st = utils.scrollTop();\n        window.location.hash = hash;\n        window.scrollTo(0, st);\n      }\n    }, this.options.hashTimeout);\n    this.cacheItems();\n    this.scrollFn();\n  };\n\n  MenuSpy.prototype.assignValues = function assignValues() {\n    this.currScrollTop = 0;\n    this.lastInViewElm = null;\n    this.menuHeight = this.element.offsetHeight + this.options.threshold;\n    this.menuItems = [].slice.call(this.element.querySelectorAll(this.options.menuItemSelector));\n    this.raf = null;\n  };\n\n  MenuSpy.prototype.cacheItems = function cacheItems() {\n    this.scrollItems = this.menuItems.map(function (elm) {\n      var target = elm.dataset.target ? document.querySelector(elm.dataset.target) : document.getElementById(elm.hash.slice(1));\n\n      if (target) {\n        var offset = Math.floor(utils.offset(target).top);\n        return {\n          elm: elm,\n          target: target,\n          offset: offset\n        };\n      }\n\n      return false;\n    });\n    this.scrollItems = this.scrollItems.filter(Boolean).sort(function (a, b) {\n      return a.offset - b.offset;\n    });\n  };\n\n  MenuSpy.prototype.tick = function tick() {\n    var fromTop = this.currScrollTop + this.menuHeight;\n    var inViewElms = this.scrollItems.filter(function (item) {\n      return item.offset < fromTop;\n    });\n    this.activateItem(inViewElms.pop());\n  };\n\n  MenuSpy.prototype.activateItem = function activateItem(inViewElm) {\n    var this$1 = this;\n    var ref = this.options;\n    var activeClass = ref.activeClass;\n    var callback = ref.callback;\n\n    if (!inViewElm) {\n      this.scrollItems.forEach(function (item) {\n        return utils.removeClass(item.elm.parentNode, activeClass);\n      });\n      this.lastInViewElm = null;\n\n      if (this.options.enableLocationHash) {\n        this.debouncedHashFn();\n      }\n\n      return;\n    }\n\n    if (this.lastInViewElm !== inViewElm.target) {\n      this.lastInViewElm = inViewElm.target;\n      this.scrollItems.forEach(function (item) {\n        utils.removeClass(item.elm.parentNode, activeClass);\n\n        if (item.target === inViewElm.target) {\n          utils.addClass(item.elm.parentNode, activeClass);\n\n          if (typeof callback === 'function') {\n            callback.call(this$1, item);\n          }\n\n          if (this$1.options.enableLocationHash) {\n            this$1.debouncedHashFn();\n          }\n        }\n      });\n    }\n  };\n\n  MenuSpy.prototype.scrollFn = function scrollFn() {\n    var st = utils.scrollTop();\n\n    if (this.currScrollTop !== st) {\n      this.currScrollTop = st;\n      this.tick();\n    }\n\n    this.raf = window.requestAnimationFrame(this.scrollFn.bind(this));\n  };\n\n  MenuSpy.prototype.destroy = function destroy() {\n    if (this.raf) {\n      window.cancelAnimationFrame(this.raf);\n    }\n\n    window.removeEventListener('resize', this.debouncedAssignValuesFn);\n  };\n\n  return MenuSpy;\n});","map":null,"metadata":{},"sourceType":"module"}